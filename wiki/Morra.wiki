  * First, create a new java project.
  * Create a new class, named Morra, and put in the code below.  This is the basic code we used last time to make a window, so you can get started more easily.

{{{
import java.awt.Frame;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;


public class Morra extends Frame {
	// Add variables here:

	public Morra(){
		super("Morra");
		this.setSize(400, 160);

		// Add code here:
		
		
		// If you do not have this code, you can not close
		// the window.
		this.addWindowListener(new WindowAdapter(){
			public void windowClosing(WindowEvent e){
				setVisible(false); dispose(); System.exit(0);
			}
		});
	}
	
	public static void main(String[] args) {
		// Create and display the window
		Morra game = new Morra();
		game.setVisible(true);
	}

}
}}}

  * If you run the program now, you should see an empty window named Morra.
  * Now, we will add buttons and text to the Window.  We want to use a Grid to lay these out.  The grid has 4 rows and 4 columns.  To do this, we can add the code below to the constructor:
{{{
// The window will be a 4x4 grid
this.setLayout(new GridLayout(4,4));
}}}
  * Next, we start adding things to the grid.  They will be added from left to right, as shown:
http://download.oracle.com/javase/1.4.2/docs/api/java/awt/doc-files/GridLayout-1.gif
  * First, add the labels on the top, for "Fingers", "Sum Guess", and "Score".  To add a label, you can use:
{{{
this.add(new Label("Label Name"));
}}}

Check to make sure the top row looks correct.

  * Now, we move to the second row.  First, add a Label for the player.
  * Next, we want to add the Box for choosing the number of fingers.  To do this, we need to create a new variable in the class:
{{{
private Choice fingerChoice;
}}}
  * Now, in the constructor we can make a new fingerChoice box, and add different choices.  You can add choices for the numbers from 1 to 5.
{{{
fingerChoice = new Choice();
fingerChoice.add("1");
// Use add to add the other numbers.
this.add(fingerChoice);
}}}
  * Run the program to see if you made the choice box correctly.
  * Now, add a second Choice box, with numbers from 2 to 10, for guessing the sum of the two numbers.
  * Lastly on this row, we add a Label for the player score.  Add a Label to the class:
{{{
private Label playerScoreLabel;
}}}
  * Then, initialize the label, and add it to the Frame, in the constructor:
{{{
playerScoreLabel = new Label("0");
this.add(playerScoreLabel);
}}}
  * For the third row, add a Label for "Computer".  Then, add three more variables to the class for the computer information:
{{{
private Label computerScoreLabel;
private Label computerFingersLabel;
private	Label computerGuessLabel;
}}}
  * On the last row, add two buttons, one to Play and one to Reset.
{{{
Button playButton = new Button("Play");
Button resetButton = new Button("Reset");
}}}
  * Finally, add a TextField to the class where you can store the final score of the game.
{{{
private TextField endScoreTextbox;
}}}
  * To initialize the TextField with a number, use:
{{{
endScoreTextbox = new TextField("11");
}}}
  * *Now, run the program and make sure the window has all of the parts you need.*
  * To finish the program, we must make the Play and Reset buttons do something.  First, we can do the reset button, which is easier.  To add an 'Event Handler', use the example here:
{{{
resetButton.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent e){
                            // When you press reset, code goes here:
			}
		});
}}}

  * When you press reset, you need to change the Labels back to their original values.  Add code for all of the labels.  For example:
{{{
playerScoreLabel.setText("0");
}}}
  * Add an 'Event Handler' for the Play button as well.  Here, you should add the code for playing one round of the game.  First, you need to read the player choices for Fingers and the Sum.  This example shows how to do this:
{{{
int playerFingers = Integer.parseInt(fingerChoice.getItem(fingerChoice.getSelectedIndex()));
}}}
  * Next, you need to determine the fingers the computer will use, and the guess.  You can generate these randomly.  Then, update the Labels with these values.
  * Now, check the sum of the player and computer fingers, to see if either player wins a point.  If so, add 1 to their score, and update the score Label.
  *Lastly, we must check if one player has won the game.  To get the end score from the box, we can use:
{{{
int endScore = Integer.parseInt(endScoreTextbox.getText());
}}}
  * If someone has won, we can display a message box to them.  An example would be:
{{{
if(playerScore == endScore){
					// Player wins
					JOptionPane.showMessageDialog(null, "You win");
				}
}}}
  * Add message boxes for the Computer winning, and a Tie.

===Other things to add===
  * Instead of a pop up box, highlight the score when a player wins.
  * Make the computer smarter, by making it only guess a sum that is larger than the number of fingers it picks.
  * You can try adding a second computer player, so there are three in total, and you must guess the sum of all three.
  * Try changing the allowed number of fingers, so you can use all 10 fingers on both hands.
  * Using the GridLayout, make a new game using a 3x3 grid of Tic-Tac-Toe.  You can use buttons for each square, with an X or an O on them.